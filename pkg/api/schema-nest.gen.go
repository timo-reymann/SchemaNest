//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// JsonSchemaInfo defines model for JsonSchemaInfo.
type JsonSchemaInfo struct {
	Identifier *string `json:"identifier,omitempty"`
}

// JsonSchemaList defines model for JsonSchemaList.
type JsonSchemaList = []JsonSchemaInfo

// JsonSchemaVersion defines model for JsonSchemaVersion.
type JsonSchemaVersion struct {
	Version *string `json:"version,omitempty"`
}

// JsonSchemaVersions defines model for JsonSchemaVersions.
type JsonSchemaVersions = []JsonSchemaVersion

// PostApiSchemaJsonSchemaIdentifierVersionVersionJSONBody defines parameters for PostApiSchemaJsonSchemaIdentifierVersionVersion.
type PostApiSchemaJsonSchemaIdentifierVersionVersionJSONBody = map[string]interface{}

// PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody defines body for PostApiSchemaJsonSchemaIdentifierVersionVersion for application/json ContentType.
type PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody = PostApiSchemaJsonSchemaIdentifierVersionVersionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all available JSON schemas
	// (GET /api/schema/json-schema)
	ListJSONSchemas(w http.ResponseWriter, r *http.Request)
	// Get versions of a json schema
	// (GET /api/schema/json-schema/{identifier})
	GetApiSchemaJsonSchemaIdentifier(w http.ResponseWriter, r *http.Request, identifier string)
	// Get latest version of a JSON schema for a channel
	// (GET /api/schema/json-schema/{identifier}/channel/{channel})
	GetApiSchemaJsonSchemaIdentifierChannelChannel(w http.ResponseWriter, r *http.Request, identifier string, channel string)
	// Get latest version of a JSON schema
	// (GET /api/schema/json-schema/{identifier}/latest)
	GetApiSchemaJsonSchemaIdentifierLatest(w http.ResponseWriter, r *http.Request, identifier string)
	// Get latest version of a JSON schema
	// (GET /api/schema/json-schema/{identifier}/version/{version})
	GetApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request, identifier string, version string)
	// Create a new json schema for a version
	// (POST /api/schema/json-schema/{identifier}/version/{version})
	PostApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request, identifier string, version string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListJSONSchemas operation middleware
func (siw *ServerInterfaceWrapper) ListJSONSchemas(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListJSONSchemas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifier operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifier(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifier(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifierChannelChannel operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifierChannelChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameterWithOptions("simple", "channel", r.PathValue("channel"), &channel, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifierChannelChannel(w, r, identifier, channel)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifierLatest operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifierLatest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifierLatest(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifierVersionVersion operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", r.PathValue("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifierVersionVersion(w, r, identifier, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiSchemaJsonSchemaIdentifierVersionVersion operation middleware
func (siw *ServerInterfaceWrapper) PostApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", r.PathValue("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiSchemaJsonSchemaIdentifierVersionVersion(w, r, identifier, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema", wrapper.ListJSONSchemas)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}", wrapper.GetApiSchemaJsonSchemaIdentifier)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}/channel/{channel}", wrapper.GetApiSchemaJsonSchemaIdentifierChannelChannel)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}/latest", wrapper.GetApiSchemaJsonSchemaIdentifierLatest)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}/version/{version}", wrapper.GetApiSchemaJsonSchemaIdentifierVersionVersion)
	m.HandleFunc("POST "+options.BaseURL+"/api/schema/json-schema/{identifier}/version/{version}", wrapper.PostApiSchemaJsonSchemaIdentifierVersionVersion)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVX0/bPhT9Ktb9/R5DEzae8saYhECIoXXay7YHk9xQo8Q29g2oivrdJ/9Jk7QglW6r",
	"tmlPuLY599xzznU6KFSjlURJFvIObLHAhvvlpVVy7n9eyEq5HW2URkMC/bkoUZKoBBr3i5YaIQdLRsg7",
	"WK2Sfkfd3mNBsEpGgFfCkocgbDzW/wYryOG/dGCTRirpBo8BmRvDl1Pgz2isUHKb7ONw8CqmEdDuwbbn",
	"skXYlRRR0kJJ4oUXQ/LGXfokGsU+4rLhUkICrakhhwWRtnmakmjUkQmHsxIddom2MEKT7w5Oby7Ye6yE",
	"FG6DVcqwwOYaLUECJKh2VSaba3Egm2WzY4eqNEquBeTwdpbNMkhAc1r47lOuRWw3vbdKHoW1O7pD34kT",
	"nrv6FyXk4My+nH+4nsdoJWDQaiVtcOZNlvVCoPT/zrWuReEBfIEhl68W3wa1pxrN26JAa6u2ZmumPge2",
	"bRpulpEz43XN+CMXNb+tkbkWWD8e7vYLOqTdMBirF0U5RzrVInAdBXwYKSe44Q0SGgv5lw6Eo+5MgKSP",
	"ihhfN/jQCoMl5GRaTEaKbQb+20Ec8DP+jPrRmaBnuPoVXOROshOHPr09usWeBC3Y0DOTililWllumHeO",
	"xGKkLVMV48z1EL3b2bq0WHApsU67uNjfzLMAEP/8SmuTZ8GKdeHDhWTjTd3OwRUntDSOASvXD9dPz0Md",
	"qsVYhFSMJto/lJz1Qu2ckQC7dzCCBr/zrP9ZNu5uXERIu7jYf7jje9Z/7Q8+3I/rwv9S8VIqEtDKPuPt",
	"jbJ/qbkPLVp6p8rlj/m62grK8bZtZwY5YTlxOxJ3X/aJXeEu40zi0/izHB/gvl9X+nsAAAD//4I3e4ab",
	"DAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
