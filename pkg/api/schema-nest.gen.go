//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	// Error Error message
	Error string `json:"error"`
}

// JsonSchemaInfo defines model for JsonSchemaInfo.
type JsonSchemaInfo struct {
	Identifier    string `json:"identifier"`
	LatestVersion struct {
		Major int `json:"major"`
		Minor int `json:"minor"`
		Patch int `json:"patch"`
	} `json:"latestVersion"`
}

// JsonSchemaList defines model for JsonSchemaList.
type JsonSchemaList = []JsonSchemaInfo

// JsonSchemaVersion defines model for JsonSchemaVersion.
type JsonSchemaVersion struct {
	Version string `json:"version"`
}

// JsonSchemaVersions defines model for JsonSchemaVersions.
type JsonSchemaVersions = []JsonSchemaVersion

// PostApiSchemaJsonSchemaIdentifierVersionVersionJSONBody defines parameters for PostApiSchemaJsonSchemaIdentifierVersionVersion.
type PostApiSchemaJsonSchemaIdentifierVersionVersionJSONBody = map[string]interface{}

// PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody defines body for PostApiSchemaJsonSchemaIdentifierVersionVersion for application/json ContentType.
type PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody = PostApiSchemaJsonSchemaIdentifierVersionVersionJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListJSONSchemas request
	ListJSONSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSchemaJsonSchemaIdentifier request
	GetApiSchemaJsonSchemaIdentifier(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSchemaJsonSchemaIdentifierChannelChannel request
	GetApiSchemaJsonSchemaIdentifierChannelChannel(ctx context.Context, identifier string, channel string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSchemaJsonSchemaIdentifierLatest request
	GetApiSchemaJsonSchemaIdentifierLatest(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSchemaJsonSchemaIdentifierVersionVersion request
	GetApiSchemaJsonSchemaIdentifierVersionVersion(ctx context.Context, identifier string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSchemaJsonSchemaIdentifierVersionVersionWithBody request with any body
	PostApiSchemaJsonSchemaIdentifierVersionVersionWithBody(ctx context.Context, identifier string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSchemaJsonSchemaIdentifierVersionVersion(ctx context.Context, identifier string, version string, body PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListJSONSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJSONSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSchemaJsonSchemaIdentifier(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSchemaJsonSchemaIdentifierRequest(c.Server, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSchemaJsonSchemaIdentifierChannelChannel(ctx context.Context, identifier string, channel string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSchemaJsonSchemaIdentifierChannelChannelRequest(c.Server, identifier, channel)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSchemaJsonSchemaIdentifierLatest(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSchemaJsonSchemaIdentifierLatestRequest(c.Server, identifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSchemaJsonSchemaIdentifierVersionVersion(ctx context.Context, identifier string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSchemaJsonSchemaIdentifierVersionVersionRequest(c.Server, identifier, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSchemaJsonSchemaIdentifierVersionVersionWithBody(ctx context.Context, identifier string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSchemaJsonSchemaIdentifierVersionVersionRequestWithBody(c.Server, identifier, version, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSchemaJsonSchemaIdentifierVersionVersion(ctx context.Context, identifier string, version string, body PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSchemaJsonSchemaIdentifierVersionVersionRequest(c.Server, identifier, version, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListJSONSchemasRequest generates requests for ListJSONSchemas
func NewListJSONSchemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/json-schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSchemaJsonSchemaIdentifierRequest generates requests for GetApiSchemaJsonSchemaIdentifier
func NewGetApiSchemaJsonSchemaIdentifierRequest(server string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/json-schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSchemaJsonSchemaIdentifierChannelChannelRequest generates requests for GetApiSchemaJsonSchemaIdentifierChannelChannel
func NewGetApiSchemaJsonSchemaIdentifierChannelChannelRequest(server string, identifier string, channel string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/json-schema/%s/channel/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSchemaJsonSchemaIdentifierLatestRequest generates requests for GetApiSchemaJsonSchemaIdentifierLatest
func NewGetApiSchemaJsonSchemaIdentifierLatestRequest(server string, identifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/json-schema/%s/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSchemaJsonSchemaIdentifierVersionVersionRequest generates requests for GetApiSchemaJsonSchemaIdentifierVersionVersion
func NewGetApiSchemaJsonSchemaIdentifierVersionVersionRequest(server string, identifier string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/json-schema/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSchemaJsonSchemaIdentifierVersionVersionRequest calls the generic PostApiSchemaJsonSchemaIdentifierVersionVersion builder with application/json body
func NewPostApiSchemaJsonSchemaIdentifierVersionVersionRequest(server string, identifier string, version string, body PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSchemaJsonSchemaIdentifierVersionVersionRequestWithBody(server, identifier, version, "application/json", bodyReader)
}

// NewPostApiSchemaJsonSchemaIdentifierVersionVersionRequestWithBody generates requests for PostApiSchemaJsonSchemaIdentifierVersionVersion with any type of body
func NewPostApiSchemaJsonSchemaIdentifierVersionVersionRequestWithBody(server string, identifier string, version string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier", runtime.ParamLocationPath, identifier)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/json-schema/%s/version/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListJSONSchemasWithResponse request
	ListJSONSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJSONSchemasResponse, error)

	// GetApiSchemaJsonSchemaIdentifierWithResponse request
	GetApiSchemaJsonSchemaIdentifierWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierResponse, error)

	// GetApiSchemaJsonSchemaIdentifierChannelChannelWithResponse request
	GetApiSchemaJsonSchemaIdentifierChannelChannelWithResponse(ctx context.Context, identifier string, channel string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierChannelChannelResponse, error)

	// GetApiSchemaJsonSchemaIdentifierLatestWithResponse request
	GetApiSchemaJsonSchemaIdentifierLatestWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierLatestResponse, error)

	// GetApiSchemaJsonSchemaIdentifierVersionVersionWithResponse request
	GetApiSchemaJsonSchemaIdentifierVersionVersionWithResponse(ctx context.Context, identifier string, version string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierVersionVersionResponse, error)

	// PostApiSchemaJsonSchemaIdentifierVersionVersionWithBodyWithResponse request with any body
	PostApiSchemaJsonSchemaIdentifierVersionVersionWithBodyWithResponse(ctx context.Context, identifier string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSchemaJsonSchemaIdentifierVersionVersionResponse, error)

	PostApiSchemaJsonSchemaIdentifierVersionVersionWithResponse(ctx context.Context, identifier string, version string, body PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSchemaJsonSchemaIdentifierVersionVersionResponse, error)
}

type ListJSONSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JsonSchemaVersions
}

// Status returns HTTPResponse.Status
func (r ListJSONSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJSONSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSchemaJsonSchemaIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JsonSchemaList
}

// Status returns HTTPResponse.Status
func (r GetApiSchemaJsonSchemaIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSchemaJsonSchemaIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSchemaJsonSchemaIdentifierChannelChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiSchemaJsonSchemaIdentifierChannelChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSchemaJsonSchemaIdentifierChannelChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSchemaJsonSchemaIdentifierLatestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiSchemaJsonSchemaIdentifierLatestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSchemaJsonSchemaIdentifierLatestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSchemaJsonSchemaIdentifierVersionVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetApiSchemaJsonSchemaIdentifierVersionVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSchemaJsonSchemaIdentifierVersionVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSchemaJsonSchemaIdentifierVersionVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiSchemaJsonSchemaIdentifierVersionVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSchemaJsonSchemaIdentifierVersionVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListJSONSchemasWithResponse request returning *ListJSONSchemasResponse
func (c *ClientWithResponses) ListJSONSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJSONSchemasResponse, error) {
	rsp, err := c.ListJSONSchemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJSONSchemasResponse(rsp)
}

// GetApiSchemaJsonSchemaIdentifierWithResponse request returning *GetApiSchemaJsonSchemaIdentifierResponse
func (c *ClientWithResponses) GetApiSchemaJsonSchemaIdentifierWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierResponse, error) {
	rsp, err := c.GetApiSchemaJsonSchemaIdentifier(ctx, identifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSchemaJsonSchemaIdentifierResponse(rsp)
}

// GetApiSchemaJsonSchemaIdentifierChannelChannelWithResponse request returning *GetApiSchemaJsonSchemaIdentifierChannelChannelResponse
func (c *ClientWithResponses) GetApiSchemaJsonSchemaIdentifierChannelChannelWithResponse(ctx context.Context, identifier string, channel string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierChannelChannelResponse, error) {
	rsp, err := c.GetApiSchemaJsonSchemaIdentifierChannelChannel(ctx, identifier, channel, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSchemaJsonSchemaIdentifierChannelChannelResponse(rsp)
}

// GetApiSchemaJsonSchemaIdentifierLatestWithResponse request returning *GetApiSchemaJsonSchemaIdentifierLatestResponse
func (c *ClientWithResponses) GetApiSchemaJsonSchemaIdentifierLatestWithResponse(ctx context.Context, identifier string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierLatestResponse, error) {
	rsp, err := c.GetApiSchemaJsonSchemaIdentifierLatest(ctx, identifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSchemaJsonSchemaIdentifierLatestResponse(rsp)
}

// GetApiSchemaJsonSchemaIdentifierVersionVersionWithResponse request returning *GetApiSchemaJsonSchemaIdentifierVersionVersionResponse
func (c *ClientWithResponses) GetApiSchemaJsonSchemaIdentifierVersionVersionWithResponse(ctx context.Context, identifier string, version string, reqEditors ...RequestEditorFn) (*GetApiSchemaJsonSchemaIdentifierVersionVersionResponse, error) {
	rsp, err := c.GetApiSchemaJsonSchemaIdentifierVersionVersion(ctx, identifier, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSchemaJsonSchemaIdentifierVersionVersionResponse(rsp)
}

// PostApiSchemaJsonSchemaIdentifierVersionVersionWithBodyWithResponse request with arbitrary body returning *PostApiSchemaJsonSchemaIdentifierVersionVersionResponse
func (c *ClientWithResponses) PostApiSchemaJsonSchemaIdentifierVersionVersionWithBodyWithResponse(ctx context.Context, identifier string, version string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSchemaJsonSchemaIdentifierVersionVersionResponse, error) {
	rsp, err := c.PostApiSchemaJsonSchemaIdentifierVersionVersionWithBody(ctx, identifier, version, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSchemaJsonSchemaIdentifierVersionVersionResponse(rsp)
}

func (c *ClientWithResponses) PostApiSchemaJsonSchemaIdentifierVersionVersionWithResponse(ctx context.Context, identifier string, version string, body PostApiSchemaJsonSchemaIdentifierVersionVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSchemaJsonSchemaIdentifierVersionVersionResponse, error) {
	rsp, err := c.PostApiSchemaJsonSchemaIdentifierVersionVersion(ctx, identifier, version, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSchemaJsonSchemaIdentifierVersionVersionResponse(rsp)
}

// ParseListJSONSchemasResponse parses an HTTP response from a ListJSONSchemasWithResponse call
func ParseListJSONSchemasResponse(rsp *http.Response) (*ListJSONSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJSONSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JsonSchemaVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSchemaJsonSchemaIdentifierResponse parses an HTTP response from a GetApiSchemaJsonSchemaIdentifierWithResponse call
func ParseGetApiSchemaJsonSchemaIdentifierResponse(rsp *http.Response) (*GetApiSchemaJsonSchemaIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSchemaJsonSchemaIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JsonSchemaList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSchemaJsonSchemaIdentifierChannelChannelResponse parses an HTTP response from a GetApiSchemaJsonSchemaIdentifierChannelChannelWithResponse call
func ParseGetApiSchemaJsonSchemaIdentifierChannelChannelResponse(rsp *http.Response) (*GetApiSchemaJsonSchemaIdentifierChannelChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSchemaJsonSchemaIdentifierChannelChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSchemaJsonSchemaIdentifierLatestResponse parses an HTTP response from a GetApiSchemaJsonSchemaIdentifierLatestWithResponse call
func ParseGetApiSchemaJsonSchemaIdentifierLatestResponse(rsp *http.Response) (*GetApiSchemaJsonSchemaIdentifierLatestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSchemaJsonSchemaIdentifierLatestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiSchemaJsonSchemaIdentifierVersionVersionResponse parses an HTTP response from a GetApiSchemaJsonSchemaIdentifierVersionVersionWithResponse call
func ParseGetApiSchemaJsonSchemaIdentifierVersionVersionResponse(rsp *http.Response) (*GetApiSchemaJsonSchemaIdentifierVersionVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSchemaJsonSchemaIdentifierVersionVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiSchemaJsonSchemaIdentifierVersionVersionResponse parses an HTTP response from a PostApiSchemaJsonSchemaIdentifierVersionVersionWithResponse call
func ParsePostApiSchemaJsonSchemaIdentifierVersionVersionResponse(rsp *http.Response) (*PostApiSchemaJsonSchemaIdentifierVersionVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSchemaJsonSchemaIdentifierVersionVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all available JSON schemas
	// (GET /api/schema/json-schema)
	ListJSONSchemas(w http.ResponseWriter, r *http.Request)
	// Get versions of a json schema
	// (GET /api/schema/json-schema/{identifier})
	GetApiSchemaJsonSchemaIdentifier(w http.ResponseWriter, r *http.Request, identifier string)
	// Get latest version of a JSON schema for a channel
	// (GET /api/schema/json-schema/{identifier}/channel/{channel})
	GetApiSchemaJsonSchemaIdentifierChannelChannel(w http.ResponseWriter, r *http.Request, identifier string, channel string)
	// Get latest version of a JSON schema
	// (GET /api/schema/json-schema/{identifier}/latest)
	GetApiSchemaJsonSchemaIdentifierLatest(w http.ResponseWriter, r *http.Request, identifier string)
	// Get latest version of a JSON schema
	// (GET /api/schema/json-schema/{identifier}/version/{version})
	GetApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request, identifier string, version string)
	// Create a new json schema for a version
	// (POST /api/schema/json-schema/{identifier}/version/{version})
	PostApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request, identifier string, version string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListJSONSchemas operation middleware
func (siw *ServerInterfaceWrapper) ListJSONSchemas(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListJSONSchemas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifier operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifier(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifier(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifierChannelChannel operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifierChannelChannel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameterWithOptions("simple", "channel", r.PathValue("channel"), &channel, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifierChannelChannel(w, r, identifier, channel)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifierLatest operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifierLatest(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifierLatest(w, r, identifier)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApiSchemaJsonSchemaIdentifierVersionVersion operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", r.PathValue("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemaJsonSchemaIdentifierVersionVersion(w, r, identifier, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostApiSchemaJsonSchemaIdentifierVersionVersion operation middleware
func (siw *ServerInterfaceWrapper) PostApiSchemaJsonSchemaIdentifierVersionVersion(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "identifier" -------------
	var identifier string

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", r.PathValue("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", r.PathValue("version"), &version, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiSchemaJsonSchemaIdentifierVersionVersion(w, r, identifier, version)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema", wrapper.ListJSONSchemas)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}", wrapper.GetApiSchemaJsonSchemaIdentifier)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}/channel/{channel}", wrapper.GetApiSchemaJsonSchemaIdentifierChannelChannel)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}/latest", wrapper.GetApiSchemaJsonSchemaIdentifierLatest)
	m.HandleFunc("GET "+options.BaseURL+"/api/schema/json-schema/{identifier}/version/{version}", wrapper.GetApiSchemaJsonSchemaIdentifierVersionVersion)
	m.HandleFunc("POST "+options.BaseURL+"/api/schema/json-schema/{identifier}/version/{version}", wrapper.PostApiSchemaJsonSchemaIdentifierVersionVersion)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX3U/bOhT/V6xz72Noyr28LG+MTQiEGFqnvTAeDslJa5TYxnaKqqr/++SPtGnaotIx",
	"tE17wqp9Pn4fxw5zyGWtpCBhDWRzMPmEavTLj1pL7RZYFNxyKbC60VKRtpwMZCVWhhJQnZ/mQG1MQSbX",
	"XLkwyEIqVpMxOCZIwM4UQQbGai7GsFgkoOmx4ZoKyG5jkrvlMXn/QLmFRQKXRoqR7/BClNLVWS/PCxKW",
	"l5x8D70qCVRoydivpI1vqx9d44PsBnJhaUzaRdZc7NpSaPPJtq0eqpC9TdXGbaLshXUg9QE8z9AVN9Zz",
	"Yqn28P7VVEIG/6QrxdMod9ojdrHMjFrjbD1xh78XOGO6inpe/ele6GIT5gCEbf8bIF0nPPoql8Ji7gkU",
	"WLtDX3gt2Wea1SgEJNDoCjKYWKtMlqaW1/JIh81BQS73+gSc3lywD1Ry4flipdQsdHNNxrqJ4LZyVdZ+",
	"XHIGw8FwcOyySkUCFYcM/h8MB8Pgo4lHn6LiEW76YKQ4Cmu3NSaPxOmBrv5FARk4g1yOPl2P4sg7GYyS",
	"wgTB/hsOWyJI+HBUquK5T+ALrO6LF5NvAtvrHI2aPCdjyqZiy069PUxT16hnsWeGVcVwirzC+4qYg8Da",
	"a8ud3sFDOl+N0mInKedkTxUPvXaGojuECjXWZEkbyG7nwF3rTgRIWquszezK21Y3lHQY68/B3Zso4O+F",
	"LexHZQKf4eg3cJY7GZ5s3uidU+yJ2wlbYWZCWlbKRhQ98c7Jsmhpw2TJkDkMUbu9pUvzCQpBVTqPi8PF",
	"PAsJ4p+fKW2yNVm+LPx2Jum/Nhs+uPJvTNcGrFheXK/uh/CitbYIruhMtL8okbVE7e2RkPZgYwQOfuVZ",
	"/71k3F+4mCGdx8Xhwx3vs/a1f/Phni4L/3XFLlckoKTZou2NNH+ouI8NGfteFrMf03WxYZTjTdnONKGl",
	"Yk3t2Hj7sr97tQ+M8N/itq+6UBgrTVjM2BMa1qhKYkF9y4R+GTJBT91Pg/gItJw7+N8DAAD//6QEpAK3",
	"DgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
